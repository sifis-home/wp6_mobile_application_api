use crate::build_rocket;
use crate::state::DeviceState;
use mobile_api::configs::DeviceInfo;
use mobile_api::security::SecurityKey;
use rocket::local::blocking::Client;
use rocket::serde::uuid::Uuid;
use std::path::PathBuf;
use std::string::ToString;

pub const TEST_PRODUCT_NAME: &str = "Test Device";

pub const TEST_AUTH_KEY: SecurityKey = SecurityKey::from_bytes([
    0x52, 0x7b, 0x1e, 0x72, 0xea, 0xde, 0x4d, 0xeb, 0x2d, 0x29, 0xec, 0x94, 0xb1, 0xe3, 0xa7, 0x97,
    0x24, 0xe8, 0x4d, 0xeb, 0x2d, 0x49, 0xea, 0xef, 0x7a, 0xb1, 0x27, 0x76, 0x9a, 0x22, 0x9e, 0xdb,
]);

pub const TEST_UUID: Uuid = Uuid::from_bytes([
    0x12, 0x3e, 0x45, 0x67, 0xe8, 0x9b, 0x12, 0xd3, 0xa4, 0x56, 0x42, 0x66, 0x14, 0x17, 0x40, 0x00,
]);

pub const TEST_PRIVATE_KEY_FILE: &str = "target/tests/sifis-home/private.pem";

pub const TEST_SHARED_DHT_KEY: SecurityKey = SecurityKey::from_bytes([
    0x4e, 0x18, 0xac, 0x22, 0xc5, 0x27, 0xb1, 0xe7, 0x2e, 0xad, 0xe0, 0xe1, 0xb4, 0xa7, 0xb2, 0x16,
    0x8a, 0xd3, 0x7a, 0xcb, 0x62, 0x9e, 0x00, 0xde, 0xbe, 0x27, 0x1e, 0x0a, 0x89, 0xdf, 0x8a, 0x0b,
]);

pub fn make_test_device_state() -> DeviceState {
    DeviceState::new(DeviceInfo::from(
        TEST_PRODUCT_NAME.to_string(),
        TEST_AUTH_KEY,
        PathBuf::from(TEST_PRIVATE_KEY_FILE),
        TEST_UUID,
    ))
}

pub fn make_test_client() -> Client {
    Client::tracked(build_rocket(make_test_device_state())).unwrap()
}
